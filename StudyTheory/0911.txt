model을 새로 만들어서 접근하게 된다.


현재 mvc에 해당하는 것.

models, controllers, views 

product.js 내용
-> 클래스를 기반으로 생성된 객체를 참조하고 배열에 집어넣기때문에
product.save(객체)를 사용할시에 products에 넣을 수 있다.

fetchAll의 경우 this를 쓸수없다. -> 해당 js파일안에 products 배열이 선언되있으며
class내부엔 products가 정의되어있지않기때문이다.


+models/products
사용자가 입력한 내용이 저장되는 파일
json 파일 형식으로 만들어진다. 

개념 readfile, readfileSync
둘의 차이는 비동기, 동기로 나눠진다. 
readfile의 경우 비동기로 이뤄지고
readfileSync의 경우는 동기로 이뤄진다.

개념 arrow functon
화살표함수의 경우 해당 매개변수를 사용하게되면 의미를 잃어버린다.
때문에 한번 사용하고 마는 변수들의 경우 arrow function을 사용하게 된다.

models/product.js에서의 오류
클래스의 반환이 비동기로 이뤄지기때문에 fs.readFile을 통해 값을 반환하기 전에
해당 메소드가 끝나버릴 수 있다.

+ views/ admin ,, shop 파일 추가
controllers 수정 -> 파일 경로 변경에 따른 코드 수정.
shop.ejs -> product-list 파일명 변경

-------------------------
지금까지 만들었던 mvc패턴에 상세 페이지들 만들기

views를 admin과 shop으로 나눈다. -> 관리자와 소비자로 나눈것이다.
관리자 페이지  - addproduct, editproduct, productlist
소비자 페이지  - cart, checkout, index, product-detail

router/admin.js 에서 get&post 경로에 admin을 추가하지않은 이유
=> app.js에서 admin을 지정해주었기때문에 내부에선 필요가없다.
* 만약 추가할경우 = 기존 : 'admin/products' 추가했을때 : 'admin/admin/products'

-------------------------------------------
MVC패턴의 특이점?

get,post에 대해서 각각의 컨트롤러가 필요해진다.
라우터에서 get post에 대해서 해당 명령들이 사용하는 모델 접근방법을 컨트롤러에 집어넣어준다는 느낌..


controllers/shop.js
exports.getProducts는 제품 전체리스트를 포함한 함수이다.
exports.getCart는 사용자가 담은 상품리스트를 포함한 함수이다.
exports.getCheckout는 사용자가 구매한 상품리스트를 포함한 함수이다.
