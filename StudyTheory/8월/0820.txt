다양한 유형의 오류가 있음을 이해해야 각 유형에 대한 대처를 할수있다.

1. syntax Errors : 대부분 수정하기 쉬움. 기본적으로 vscode 혹은 IDE툴에서 걸러준다.

2. runtime Errors : 실행을 하게되고 나오게되는 오류이다. 여러 괄호나 request 혹은 response 도중에 나올수잇는 오류로 생각된다.

3. Logical Errors : 어떠한 오류메시지가 표현되지 않지만 원하는 기능이 실행되지 않는 경우를 의미한다.
    -- 이때 debug를 사용하는게 도움이 많이 될 수 있다.
    -- breakpoint를 찍어두고 해당 부분을 돌려보며 확인하는게 좋다.


Debug 

    VARIABLES

    WATCH

    CALLSTACK

    BREAKPOINTS

=====================디버그는 나중에 다루자===========

Express.js
노드 프로젝트에 타사 패키지로 설치하는 프레임워크이다.
많은 유틸리티 기능을 제공함으로 사용을 잘하는게 도움이 크겠다.

미들웨어 / 해당 미들웨어를 사용하여 요청과 응답을 처리

라우팅 및 다른 수신 요청과 경로 또는 url에 대해 다른 코드를 실행하는 방법.
html 페이지를 반환하는 방법.

Express.js란?

1. 서버 측 논리를 작성하는 건 복잡한 일이다.
- 직접 코딩을 하게 되면 데이터의 유형을 다양하게 받기 힘들 수 있다.

작업하는데 사용하는 도구와 코딩 규칙등을 볼 수 있겠다.


서버를 구축할수있는 모음
vanilla Node.js

adonis.js 찾아보기.
Koa 찾아보기.
Sails.js 등등..

express 의 가장 좋은 점은 유연하고 실제로 많은 기능을 추가하지 않는다.

많은 것을 구성할 필요없이 데이터를 주고받을 수 잇음.
 -> 그냥 노드의 다른 패키지 적용이 쉬운 메인 패키지라 생각해야겠다.

요청에따라 다양한 미들웨어를 생성하고 동작시킨뒤 response을 한다.

next의 경우 실제로 ㅇ함수이다.