프로토콜에 의해 브라우저가 작업할수있는 응답을 요청하고 다시 보내게 된다.
== 프로토콜을 지정해두고 해당 프로토콜을 주고받으면서 html이든 json이든 여러 파일을 주고 받는다고 생각하자.

node.js에서 기본 모듈로 http라는 모듈이있다.
선언시에 const http = require('http');를 입력해주게되면
이후 http에 대한 메소드들을 사용할 수 있게 된다. -> java의 import와 비슷한 역할이라 생각한다.

server를 생성한뒤 listen(포트번호)를 해주는 것은 "포트번호"로부터 들어오는 요청을 받는다는 의미이다.
-> 덕분에 이후 localhost:3000을 통해서 요청을 받게된다. ( 애매한 표현이니 다시 고쳐야된다.)


node.js의 경우 관리뿐만아니라 모든 종류의 항목에 대해 이런 이벤트 기반 접근 방식을 사용하게된다.

이벤트기반 접근방식을 택하는 이유?
= node.js는 단일 스레드 자바스크립트를 실행하게된다.

node.js는 기본적으로 리스너가 있고 서버 생성이 리스너를 생성하는한 지속적인 루프를 가진다.

process.exit()의 경우 - JAVA의 system.exit()와 비슷한거같다(?)


헤더에는 기본적으로 요청을 하는 클라이언트의 정보들을 담고있다.

로그에서 어떤 페이지를 통해 요청을 받았는지도 알 수 있겠다.

get의 경우 브라우저에 url을 입력하는 경우 사용되는 기본 방법.

post의 경우 url이외의 전송방식으로 봐도된다.

각 실행시에 return을 써줘야되는데 아니게 되면 다른 요청을 못받게 된다.

**** 302의 경우 redirect를 의미한다!!****