각 페이지 혹은 요청에 대한 값을 express.use()를 통해서 처리할 수 있게 된다.

가장 기본적인 틀임 

app.use(req, res ) -> req를 통해서 받게되고, res를 통해 주게된다.

github에 패키지에 대한 내용이 다 적혀있기 때문에 찾아보면 해당 메소드의 역할을 확인할 수 있다.

send = string으로 지정하여 보낼경우 기본적으로 html 형식으로 보내게된다.
     = object로 지정하여 보낼경우 기본적으로 json 혹은 binary형식으로 보내게된다.


listen = http.createServer를 실행하게 되있다. == express를 사용시 createServer를 생략해도 되는 이유이다.

///// express를 통해 조금더 간단하게 표현할수있겟따.


app.use( 주소 , (콜백))에서  '/url' 을 입력함으로써 해당 주소에 따른 콜백을 출력할 수 있다.
각각의 페이지를 해당 /url을 통해서 관리할 수 있겠다.

모든 요청에 대해 적용해야하는 미들웨어가 있을경우 주소위치에 '/'만을 사용함으로써 표시할수잇ㄱ다.

단지 url을 통해서 페이지를 응답하는게 아닌 form형식의 post 내용을 다시 보내줄수도있다.

form을 보낼때 지정한 주소에 따라서 새로운 동작을 정의해주어야한다. +form을 통해서 응답을 보냈기 때문에 다시 redirect해주어야한다.
// 페이지내에서 동작할 때 사용(?)

body-parser를 통해서 html 구문을 사용할수있게된다
== body에 들어가있는 값들을 해석해주는 역할을 한다.
    console.log(req.body); -> 해당 구문을 그냥 실행할시에 express는 자동으로 변환할수있는 기능을 가지고 있지않다.
때문에 해당 구문을 해석해주는 패키지가 따로 있어야하며 해당 강의에선 body-parser를 사용하여 변환하게 되는것이다.

/// POST형식으로 보냈는데 어떻게 해석하는지 찾아봐야됨.'
express.형태 -> express를통해서 어떤 request인지 식별하는거라 생각하자.
express.use , express.get, post, put, patch,,,, 여러 작업을 할수잇음.

get을 사용하는 경우 해당 url과 완벽하게 일치하는 페이지에 대해서 작동하게 된다.


use를 사용하여 오류 페이지에 대한 핸들링도 할수있다.
이때 res.status(404).send()를 통해서 보내게된다.
 ==만약 사용자가 이상한 페이지를 연결했다면 pagenotfound를 출력할 수 잇다.



app.js에서 해당 페이지를 찾아가는데 주소를 잘못 입력할 경우가 있다.

만약에 해당 페이지를 잘못찾을 경우 

페이지 주소에 대해서 폴더 단위로 변경도 가능하다.
 -> 다른 페이지에서 같은 url을 사용하는 경우
app.use('폴더이름' 경로) 식으로 사용가능하다.
// 사용할일이 있나 싶다?




