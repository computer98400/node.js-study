요청하는게 무엇인지 확인을 할수있으면 그에 맞는 응답을 해줄수있다.

해당 강의에선 url , method를 이용하여 예시를 들었다.

writeFileSync를 사용하게 되는 경우 해당 파일을 모두 읽어와서 동기화를 한뒤에 다시 입력하는 시스템이다.
때문에 수백기가 혹은 메가 데이터를 실행하기위해 다른 동작을 못하게 막을수있다.
때문에 writeFile을 사용하는게 바람직하다.

writeFile를 통해서 만들게 되면 오류가 나더라도 다음 내용을 진행할수있게되기때문에 더 유용하다?

node.js를 이해하기 위해선 single Thread를 이해할 필요가 잇다.

node.js는 event loop를 통해 실행된다.

기본적으로 이벤트루프는 빠른 마무리 코드가 포함된 콜백만을 처리한다.

대신 파일 시스템과 다른 오래걸리는 작업은 작업자에게 전송된다.

worker Pool이란 곳이 잇는데 이곳에 다른 thread가 존재하게 된다.
이후 이곳에 작업자의 일로 나눠지게 된다.
해당 pool이 가벼운 처리를 제외한 나머지 일을 처리해주고 이후 eventloop로 돌아간다.

때문에 기본적으로 single thread로 실행되지만 멀티스래드처럼 실행할수있는 이유이다.

Timers / Pending Callbacks / Poll / check / Close Callbacks //// process.exit
왼쪽에서 오른쪽순으로 실행하게 된다.

process.exit 를 사용하게되면 위의 모든 순서를 무시하고 프로세스가 종료되기때문에 기본적으론 사용되지않는다.


