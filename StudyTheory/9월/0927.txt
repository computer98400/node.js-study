cart.ejs에 삭제버튼 추가.

모듈 설명
- database를 연동하기.
- 기존에 query파라미터를 사용하는 것에 database를 추가하는 느낌.

sql, nosql
차이점을 알려주는모듈

기본적으로 sql을 사용함.
이후 nosql을 통해서 표현함.



SQL과 nosql

DB의 목표 데이터를 저장하고 쉽게 사용할 수 있게 만드는것.
데이터가 많아질수록 파일에 접근하는것보다 빨라진다.

해당 강의에서 사용하는 테이블

users - id, email, name
products - id, title, price, description
orders - id, user_id, product_id        -> sql기반 데이터베이스에선 관계설정을통해서 손쉽게 만들수있다.

특징
1. 각 필드가 저장하는 데이터 유형을 확실히 정해주어야한다.
2. 관계 설정을 할 수 있다. = 테이블을 연결할 수 있다.

sql 기반의 코드 예시)
select * from users where age > 28
여기서 *,users, age>28 에 해당하는것을 parameters혹은 data로 설정한다.
select from where 에 해당하는것을 sql키워드를 통해서 작성한다.


nosql
database를 shop으로 잡고
collections(sql에선 table인 개념0) users orders 
documents 각 필드와 값들이 들어간다.

차이점
nosql의 경우 스키마가 정해져있지않다 == 틀이 없다.
ex) 필드값을 name, age로 저장한다해서 꼭 두가지 모두 충족해야되는 경우는 아니다.
    - {name:'Max', age:29}
    - {name:'Max'}

또한 관계설정이 없다.
때문에 각기 다른 컬렉션(sql에선 table)을 연결하고싶을땐 중복되는 데이터를 집어넣어야한다.
반대로 생각해서 어떤 데이터를 접근할 때 연결되어있는 컬렉션이 있다면 틀에서 자유롭게 데이터를 접근할 수 있다는 말이다.


데이터베이스 서버에 대한 수평 수직 스케일링
수평적 스케일링 - 데이터베이스 서버의 댓수를 늘려서 확장하는 방식이다.
                 서버를 무한하게 확장시킬 수 있다.
                 다만 서버가 늘어날수록 각 서버에 저장된 데이터를 병합해야할 필요가 생긴다.
수직적 스케일링 - 서버의 성능을 높여서 좀더 빠르게 만드는 확장 방식.
                 단일 시스템에 무한히 많은 cpu성능을 높일수없다.

-> 해당 특성이 sql과 nosql에서 나타난다.
sql = 수평적 스케일링
nosql = 수직적 스케일링

nosql의 경우 처리량이 높은 애플리케이션에서 성능이 좋다.

관계가 중요한 부분 혹은 데이터를 분할하여 원하는 위치에 저장하고 싶은경우
sql은 해당 기능을 확실하게 표현할 수 있겟다

== 모든 데이터가 처리량이 높은건 아니라는걸 명심해야한다.
