연결해야되는 부분
-> 제품 편집을 눌렀을 시에 제품의 ID를 통해서 파일을 읽어야한다.
버튼을 눌렀을 때 해당 제품의 정보를 가져와서 edit-product.ejs에 정해진 값들을 집어넣게되고
이후 해당 제품에 대한 업데이트를 실행한 뒤 다시 표현해준다.

당장에 이전 실습에선 product_ID만을 넘겨주기 때문에 
controller/admin.js 파일에 가보면 editMode에 따라서 해당 페이지를 redirect해주는지
혹은 파일을 변경할 페이지로 반환하는지를 확인할 수 있다.

따라서 get방식으로 전달하는 것에 따라서 파라미터를 product-id만을 넘기는게 아닌 editmode값도 함께
넘겨주어야한다.

현재 get방식으로 데이터를 불러와서 표현하는것만 되있지만
이후 post방식을 통해서 기존의 데이터를 업데이트하는 동작을 만들예정일듯..

edit 기능을 추가함으로써
'어떤 제품을 찾아서 변경하는가'
를 알아야한다.

기존 파일은 add-product기능과 edit-product기능을 같은 페이지로 사용하기 때문에
만약 이미 있는 ID의 경우는 '찾기'기능을 표현해야하고,
없는 경우는 '생성'기능을 표현해야한다.

때문에 ID를 통해서 제품을 찾고 생성하려면 기존에 작동되던
model의 파일을 변경하여야한다.

물론 edit로 변경됨에 따라서 id를 표현하긴했지만, 데이터를 저장하는 곳에선 랜덤으로 id값을 부여했으며
route/admin/postEditProduct 메소드를 추가할 때 기존의 model/product.js의 product클래스에 ID를 추가해야한다.

잘봐야할 부분은 request에 대해서 body를 가져오는지, query를 가져오는지, param을 가져오는지 각각 확인해야한다.
req.body : form형식의 값을 가져오는데 사용됨
req.query : 주소값을 가져오는데 사용됨.
req.parameter : 주소값이후에 나오는 파라미터를 가져오는데 사용됨